name: 'Composer install action'
description: 'Composer install with cache'

env:
  cache_bust: v1

inputs:
  composer_install_flags:
    required: false
    default: ''
    description: "Flags that will be added to the composer install command"

  cache_dir:
    required: true
    description: Directory that will hold the cached data.

runs:
  using: "composite"
  steps:
    - name: Create vendor cache folder
      env:
        cache_dir: ${{ inputs.cache_dir }}
      shell: bash
      run: |
        if [ ! -d "$cache_dir" ]
        then
          mkdir $cache_dir
        fi

    - name: Check for cache hit/miss
      shell: bash
      env:
        cache_dir: ${{ inputs.cache_dir }}
      run: |
        hash="${{ env.cache_bust }}_${{ hashFiles('composer.json', 'composer.lock') }}"
        echo "COMPOSER_HASH=$hash" >> $GITHUB_ENV
        
        if [ ! -d "$cache_dir/$hash" ]
        then
          echo "Cache MISS!"
          echo "COMPOSER_CACHE_MISS=true" >> $GITHUB_ENV
        else
          echo "Cache HIT!"
          echo "COMPOSER_CACHE_HIT=true" >> $GITHUB_ENV
        fi

    - name: Restore cache
      shell: bash
      if: env.COMPOSER_CACHE_HIT
      env:
        hash: ${{ env.COMPOSER_HASH }}
        cache_dir: ${{ inputs.cache_dir }}
      run: |
        # Remove existing vendor folder if it exists
        if [ -d "vendor" ]
        then
          echo "Found existing vendor folder, removing"
          rm -rf vendor
        fi
        
        echo "Restore vendor folder from cache"
        cp -r $cache_dir/$hash vendor

    - name: Composer install
      shell: bash
      run: |
        composer install

    - name: Save cache
      shell: bash
      if: env.COMPOSER_CACHE_MISS
      env:
        hash: ${{ env.COMPOSER_HASH }}
        cache_dir: ${{ inputs.cache_dir }}
      run: |
        cp -r vendor $cache_dir/$hash
